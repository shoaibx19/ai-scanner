{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shoai\\\\Desktop\\\\AI Scanner\\\\ai-scanner\\\\src\\\\components\\\\ImageProcessor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageProcessor({\n  file,\n  onDataExtracted\n}) {\n  _s();\n  const [status, setStatus] = useState('');\n  useEffect(() => {\n    const processImage = async () => {\n      try {\n        setStatus('Processing image...');\n        const result = await Tesseract.recognize(file, 'eng', {\n          logger: m => console.log(m)\n        });\n        const text = result.data.text;\n        console.log('Extracted text:', text);\n        const cleanedText = preprocessText(text);\n        console.log('Cleaned text:', cleanedText);\n        const extractedData = extractInformation(cleanedText);\n        console.log('Extracted data:', extractedData);\n        if (extractedData.vin || extractedData.desc || extractedData.yrMdl) {\n          onDataExtracted(extractedData);\n          setStatus('Processing complete');\n        } else {\n          setStatus('Failed to extract information. Please try a different image.');\n        }\n      } catch (error) {\n        console.error('Error processing image:', error);\n        setStatus('Error processing image. Please try again.');\n      }\n    };\n    if (file) {\n      processImage();\n    }\n  }, [file, onDataExtracted]);\n  const preprocessText = text => {\n    return text.replace(/\\s+/g, ' ').trim();\n  };\n  const extractInformation = text => {\n    const extractedData = {\n      vin: extractVIN(text),\n      desc: extractDESC(text),\n      yrMdl: extractYRMDL(text)\n    };\n    return extractedData;\n  };\n  const extractVIN = text => {\n    const vinRegex = /VIN:\\s*([A-HJ-NPR-Z0-9]{17})/i;\n    const match = text.match(vinRegex);\n    return match ? match[1] : '';\n  };\n  const extractDESC = text => {\n    const descRegex = /DESC\\.?:?\\s*(COROLLA\\s+LE[\\s\\S]*?)(?=VIN:|YR\\/MDL:|CLR:|$)/i;\n    const match = text.match(descRegex);\n    if (match) {\n      // Clean up the description\n      return match[1].replace(/[^\\w\\s]/g, '').replace(/\\s+/g, ' ').trim().toUpperCase();\n    }\n    return '';\n  };\n  const extractYRMDL = text => {\n    const yrMdlRegex = /YR\\/MDL:\\s*(\\d{4}\\/\\d+[A-Z]?)/i;\n    const match = text.match(yrMdlRegex);\n    return match ? match[1] : '';\n  };\n  const cleanupExtractedData = data => {\n    return {\n      vin: data.vin,\n      desc: data.desc.replace(/SAFETY SENSE.*$/, '').trim(),\n      yrMdl: data.yrMdl\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageProcessor, \"n83CR3Lja6Jhpo68KQMsYUAIUVk=\");\n_c = ImageProcessor;\nexport default ImageProcessor;\nvar _c;\n$RefreshReg$(_c, \"ImageProcessor\");","map":{"version":3,"names":["React","useEffect","useState","Tesseract","jsxDEV","_jsxDEV","ImageProcessor","file","onDataExtracted","_s","status","setStatus","processImage","result","recognize","logger","m","console","log","text","data","cleanedText","preprocessText","extractedData","extractInformation","vin","desc","yrMdl","error","replace","trim","extractVIN","extractDESC","extractYRMDL","vinRegex","match","descRegex","toUpperCase","yrMdlRegex","cleanupExtractedData","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shoai/Desktop/AI Scanner/ai-scanner/src/components/ImageProcessor.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Tesseract from 'tesseract.js';\r\n\r\nfunction ImageProcessor({ file, onDataExtracted }) {\r\n  const [status, setStatus] = useState('');\r\n\r\n  useEffect(() => {\r\n    const processImage = async () => {\r\n      try {\r\n        setStatus('Processing image...');\r\n        const result = await Tesseract.recognize(file, 'eng', {\r\n          logger: m => console.log(m)\r\n        });\r\n        const text = result.data.text;\r\n        console.log('Extracted text:', text);\r\n\r\n        const cleanedText = preprocessText(text);\r\n        console.log('Cleaned text:', cleanedText);\r\n\r\n        const extractedData = extractInformation(cleanedText);\r\n        console.log('Extracted data:', extractedData);\r\n\r\n        if (extractedData.vin || extractedData.desc || extractedData.yrMdl) {\r\n          onDataExtracted(extractedData);\r\n          setStatus('Processing complete');\r\n        } else {\r\n          setStatus('Failed to extract information. Please try a different image.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error processing image:', error);\r\n        setStatus('Error processing image. Please try again.');\r\n      }\r\n    };\r\n\r\n    if (file) {\r\n      processImage();\r\n    }\r\n  }, [file, onDataExtracted]);\r\n\r\n  const preprocessText = (text) => {\r\n    return text.replace(/\\s+/g, ' ').trim();\r\n  };\r\n\r\n  const extractInformation = (text) => {\r\n    const extractedData = {\r\n      vin: extractVIN(text),\r\n      desc: extractDESC(text),\r\n      yrMdl: extractYRMDL(text)\r\n    };\r\n\r\n    return extractedData;\r\n  };\r\n\r\n  const extractVIN = (text) => {\r\n    const vinRegex = /VIN:\\s*([A-HJ-NPR-Z0-9]{17})/i;\r\n    const match = text.match(vinRegex);\r\n    return match ? match[1] : '';\r\n  };\r\n\r\n  const extractDESC = (text) => {\r\n    const descRegex = /DESC\\.?:?\\s*(COROLLA\\s+LE[\\s\\S]*?)(?=VIN:|YR\\/MDL:|CLR:|$)/i;\r\n    const match = text.match(descRegex);\r\n    if (match) {\r\n      // Clean up the description\r\n      return match[1].replace(/[^\\w\\s]/g, '').replace(/\\s+/g, ' ').trim().toUpperCase();\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const extractYRMDL = (text) => {\r\n    const yrMdlRegex = /YR\\/MDL:\\s*(\\d{4}\\/\\d+[A-Z]?)/i;\r\n    const match = text.match(yrMdlRegex);\r\n    return match ? match[1] : '';\r\n  };\r\n\r\n  const cleanupExtractedData = (data) => {\r\n    return {\r\n      vin: data.vin,\r\n      desc: data.desc.replace(/SAFETY SENSE.*$/, '').trim(),\r\n      yrMdl: data.yrMdl\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>{status}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageProcessor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}