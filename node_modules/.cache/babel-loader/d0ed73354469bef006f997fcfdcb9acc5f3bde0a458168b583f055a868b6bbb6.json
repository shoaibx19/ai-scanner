{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shoai\\\\Desktop\\\\AI Scanner\\\\ai-scanner\\\\src\\\\components\\\\ImageProcessor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { createWorker, createScheduler } from 'tesseract.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageProcessor({\n  file,\n  onDataExtracted\n}) {\n  _s();\n  const [status, setStatus] = useState('');\n  useEffect(() => {\n    const processImage = async () => {\n      try {\n        setStatus('Initializing OCR...');\n        const scheduler = createScheduler();\n        const worker1 = await createWorker();\n        const worker2 = await createWorker();\n        await worker1.loadLanguage('eng');\n        await worker2.loadLanguage('eng');\n        await worker1.initialize('eng');\n        await worker2.initialize('eng');\n        scheduler.addWorker(worker1);\n        scheduler.addWorker(worker2);\n        setStatus('Processing image...');\n        const results = await Promise.all([scheduler.addJob('recognize', file, {\n          tessedit_char_whitelist: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ/',\n          tessedit_pageseg_mode: '6'\n        }), scheduler.addJob('recognize', await preprocessImage(file), {\n          tessedit_char_whitelist: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ/',\n          tessedit_pageseg_mode: '6'\n        })]);\n        await scheduler.terminate();\n        const extractedData = results.map(result => extractInformation(result.data.text));\n        const bestResult = selectBestResult(extractedData);\n        console.log('Extracted data:', bestResult);\n        if (bestResult.vin || bestResult.desc || bestResult.yrMdl) {\n          onDataExtracted(bestResult);\n          setStatus('Processing complete');\n        } else {\n          setStatus('Failed to extract information. Please try a different image.');\n        }\n      } catch (error) {\n        console.error('Error processing image:', error);\n        setStatus('Error processing image. Please try again.');\n      }\n    };\n    if (file) {\n      processImage();\n    }\n  }, [file, onDataExtracted]);\n  const preprocessImage = async file => {\n    return new Promise(resolve => {\n      const img = new Image();\n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        canvas.width = img.width;\n        canvas.height = img.height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        const data = imageData.data;\n        for (let i = 0; i < data.length; i += 4) {\n          const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n          data[i] = data[i + 1] = data[i + 2] = avg > 128 ? 255 : 0;\n        }\n        ctx.putImageData(imageData, 0, 0);\n        canvas.toBlob(resolve);\n      };\n      img.src = URL.createObjectURL(file);\n    });\n  };\n  const extractInformation = text => {\n    const cleanedText = text.replace(/\\s+/g, ' ').trim();\n    return {\n      vin: extractVIN(cleanedText),\n      desc: extractDESC(cleanedText),\n      yrMdl: extractYRMDL(cleanedText)\n    };\n  };\n  const extractVIN = text => {\n    const vinPatterns = [/VIN:?\\s*([A-HJ-NPR-Z0-9]{17})/i, /\\b([A-HJ-NPR-Z0-9]{17})\\b/, /VEHICLE\\s+ID\\s+NUMBER:?\\s*([A-HJ-NPR-Z0-9]{17})/i];\n    for (const pattern of vinPatterns) {\n      const match = text.match(pattern);\n      if (match) return match[1];\n    }\n    return '';\n  };\n  const extractDESC = text => {\n    const descPatterns = [/MAKE\\/MODEL:?\\s*(\\w+(?:\\s+\\w+)?)/i, /MODEL:?\\s*(\\w+(?:\\s+\\w+)?)/i, /VEHICLE:?\\s*(\\w+(?:\\s+\\w+)?)/i, /CAR:?\\s*(\\w+(?:\\s+\\w+)?)/i];\n    for (const pattern of descPatterns) {\n      const match = text.match(pattern);\n      if (match) {\n        const desc = match[1].replace(/[^\\w\\s]/g, '').trim().toUpperCase();\n        const words = desc.split(/\\s+/);\n        return words.slice(0, 2).join(' ');\n      }\n    }\n\n    // Fallback: look for known car brands\n    const carBrands = ['TOYOTA', 'HONDA', 'FORD', 'CHEVROLET', 'NISSAN', 'HYUNDAI', 'KIA', 'SUBARU', 'MAZDA', 'VOLKSWAGEN'];\n    for (const brand of carBrands) {\n      if (text.includes(brand)) {\n        const brandIndex = text.indexOf(brand);\n        const afterBrand = text.slice(brandIndex + brand.length);\n        const words = afterBrand.split(/\\s+/);\n        return `${brand} ${words[0] || ''}`.trim().toUpperCase();\n      }\n    }\n    return '';\n  };\n  const extractYRMDL = text => {\n    const yrMdlPatterns = [/YR\\/MDL:?\\s*(\\d{4}\\/\\d+[A-Z]?)/i, /YEAR\\/MODEL:?\\s*(\\d{4}\\/\\d+[A-Z]?)/i, /(\\d{4})\\s*(\\w+)/];\n    for (const pattern of yrMdlPatterns) {\n      const match = text.match(pattern);\n      if (match) {\n        if (match[2]) {\n          return `${match[1]}/${match[2]}`;\n        }\n        return match[1];\n      }\n    }\n\n    // Fallback: look for a 4-digit year\n    const yearMatch = text.match(/\\b(19|20)\\d{2}\\b/);\n    if (yearMatch) {\n      const year = yearMatch[1];\n      const afterYear = text.slice(text.indexOf(year) + 4);\n      const modelMatch = afterYear.match(/\\b[A-Z0-9]+\\b/);\n      if (modelMatch) {\n        return `${year}/${modelMatch[0]}`;\n      }\n      return year;\n    }\n    return '';\n  };\n  const selectBestResult = results => {\n    return results.reduce((best, current) => {\n      const currentScore = calculateExtractionScore(current);\n      const bestScore = calculateExtractionScore(best);\n      return currentScore > bestScore ? current : best;\n    });\n  };\n  const calculateExtractionScore = data => {\n    let score = 0;\n    if (data.vin && data.vin.length === 17) score += 3;\n    if (data.desc && data.desc.split(' ').length === 2) score += 2;\n    if (data.yrMdl && data.yrMdl.includes('/')) score += 2;\n    return score;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageProcessor, \"n83CR3Lja6Jhpo68KQMsYUAIUVk=\");\n_c = ImageProcessor;\nexport default ImageProcessor;\nvar _c;\n$RefreshReg$(_c, \"ImageProcessor\");","map":{"version":3,"names":["React","useEffect","useState","createWorker","createScheduler","jsxDEV","_jsxDEV","ImageProcessor","file","onDataExtracted","_s","status","setStatus","processImage","scheduler","worker1","worker2","loadLanguage","initialize","addWorker","results","Promise","all","addJob","tessedit_char_whitelist","tessedit_pageseg_mode","preprocessImage","terminate","extractedData","map","result","extractInformation","data","text","bestResult","selectBestResult","console","log","vin","desc","yrMdl","error","resolve","img","Image","onload","canvas","document","createElement","width","height","ctx","getContext","drawImage","imageData","getImageData","i","length","avg","putImageData","toBlob","src","URL","createObjectURL","cleanedText","replace","trim","extractVIN","extractDESC","extractYRMDL","vinPatterns","pattern","match","descPatterns","toUpperCase","words","split","slice","join","carBrands","brand","includes","brandIndex","indexOf","afterBrand","yrMdlPatterns","yearMatch","year","afterYear","modelMatch","reduce","best","current","currentScore","calculateExtractionScore","bestScore","score","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shoai/Desktop/AI Scanner/ai-scanner/src/components/ImageProcessor.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { createWorker, createScheduler } from 'tesseract.js';\r\n\r\nfunction ImageProcessor({ file, onDataExtracted }) {\r\n  const [status, setStatus] = useState('');\r\n\r\n  useEffect(() => {\r\n    const processImage = async () => {\r\n      try {\r\n        setStatus('Initializing OCR...');\r\n        const scheduler = createScheduler();\r\n        const worker1 = await createWorker();\r\n        const worker2 = await createWorker();\r\n        await worker1.loadLanguage('eng');\r\n        await worker2.loadLanguage('eng');\r\n        await worker1.initialize('eng');\r\n        await worker2.initialize('eng');\r\n        scheduler.addWorker(worker1);\r\n        scheduler.addWorker(worker2);\r\n\r\n        setStatus('Processing image...');\r\n        const results = await Promise.all([\r\n          scheduler.addJob('recognize', file, {\r\n            tessedit_char_whitelist: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ/',\r\n            tessedit_pageseg_mode: '6',\r\n          }),\r\n          scheduler.addJob('recognize', await preprocessImage(file), {\r\n            tessedit_char_whitelist: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ/',\r\n            tessedit_pageseg_mode: '6',\r\n          })\r\n        ]);\r\n\r\n        await scheduler.terminate();\r\n\r\n        const extractedData = results.map(result => extractInformation(result.data.text));\r\n        const bestResult = selectBestResult(extractedData);\r\n\r\n        console.log('Extracted data:', bestResult);\r\n\r\n        if (bestResult.vin || bestResult.desc || bestResult.yrMdl) {\r\n          onDataExtracted(bestResult);\r\n          setStatus('Processing complete');\r\n        } else {\r\n          setStatus('Failed to extract information. Please try a different image.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error processing image:', error);\r\n        setStatus('Error processing image. Please try again.');\r\n      }\r\n    };\r\n\r\n    if (file) {\r\n      processImage();\r\n    }\r\n  }, [file, onDataExtracted]);\r\n\r\n  const preprocessImage = async (file) => {\r\n    return new Promise((resolve) => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.drawImage(img, 0, 0);\r\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        const data = imageData.data;\r\n        for (let i = 0; i < data.length; i += 4) {\r\n          const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\r\n          data[i] = data[i + 1] = data[i + 2] = avg > 128 ? 255 : 0;\r\n        }\r\n        ctx.putImageData(imageData, 0, 0);\r\n        canvas.toBlob(resolve);\r\n      };\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  };\r\n\r\n  const extractInformation = (text) => {\r\n    const cleanedText = text.replace(/\\s+/g, ' ').trim();\r\n    return {\r\n      vin: extractVIN(cleanedText),\r\n      desc: extractDESC(cleanedText),\r\n      yrMdl: extractYRMDL(cleanedText)\r\n    };\r\n  };\r\n\r\n  const extractVIN = (text) => {\r\n    const vinPatterns = [\r\n      /VIN:?\\s*([A-HJ-NPR-Z0-9]{17})/i,\r\n      /\\b([A-HJ-NPR-Z0-9]{17})\\b/,\r\n      /VEHICLE\\s+ID\\s+NUMBER:?\\s*([A-HJ-NPR-Z0-9]{17})/i\r\n    ];\r\n\r\n    for (const pattern of vinPatterns) {\r\n      const match = text.match(pattern);\r\n      if (match) return match[1];\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const extractDESC = (text) => {\r\n    const descPatterns = [\r\n      /MAKE\\/MODEL:?\\s*(\\w+(?:\\s+\\w+)?)/i,\r\n      /MODEL:?\\s*(\\w+(?:\\s+\\w+)?)/i,\r\n      /VEHICLE:?\\s*(\\w+(?:\\s+\\w+)?)/i,\r\n      /CAR:?\\s*(\\w+(?:\\s+\\w+)?)/i\r\n    ];\r\n\r\n    for (const pattern of descPatterns) {\r\n      const match = text.match(pattern);\r\n      if (match) {\r\n        const desc = match[1].replace(/[^\\w\\s]/g, '').trim().toUpperCase();\r\n        const words = desc.split(/\\s+/);\r\n        return words.slice(0, 2).join(' ');\r\n      }\r\n    }\r\n\r\n    // Fallback: look for known car brands\r\n    const carBrands = ['TOYOTA', 'HONDA', 'FORD', 'CHEVROLET', 'NISSAN', 'HYUNDAI', 'KIA', 'SUBARU', 'MAZDA', 'VOLKSWAGEN'];\r\n    for (const brand of carBrands) {\r\n      if (text.includes(brand)) {\r\n        const brandIndex = text.indexOf(brand);\r\n        const afterBrand = text.slice(brandIndex + brand.length);\r\n        const words = afterBrand.split(/\\s+/);\r\n        return `${brand} ${words[0] || ''}`.trim().toUpperCase();\r\n      }\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const extractYRMDL = (text) => {\r\n    const yrMdlPatterns = [\r\n      /YR\\/MDL:?\\s*(\\d{4}\\/\\d+[A-Z]?)/i,\r\n      /YEAR\\/MODEL:?\\s*(\\d{4}\\/\\d+[A-Z]?)/i,\r\n      /(\\d{4})\\s*(\\w+)/\r\n    ];\r\n\r\n    for (const pattern of yrMdlPatterns) {\r\n      const match = text.match(pattern);\r\n      if (match) {\r\n        if (match[2]) {\r\n          return `${match[1]}/${match[2]}`;\r\n        }\r\n        return match[1];\r\n      }\r\n    }\r\n\r\n    // Fallback: look for a 4-digit year\r\n    const yearMatch = text.match(/\\b(19|20)\\d{2}\\b/);\r\n    if (yearMatch) {\r\n      const year = yearMatch[1];\r\n      const afterYear = text.slice(text.indexOf(year) + 4);\r\n      const modelMatch = afterYear.match(/\\b[A-Z0-9]+\\b/);\r\n      if (modelMatch) {\r\n        return `${year}/${modelMatch[0]}`;\r\n      }\r\n      return year;\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const selectBestResult = (results) => {\r\n    return results.reduce((best, current) => {\r\n      const currentScore = calculateExtractionScore(current);\r\n      const bestScore = calculateExtractionScore(best);\r\n      return currentScore > bestScore ? current : best;\r\n    });\r\n  };\r\n\r\n  const calculateExtractionScore = (data) => {\r\n    let score = 0;\r\n    if (data.vin && data.vin.length === 17) score += 3;\r\n    if (data.desc && data.desc.split(' ').length === 2) score += 2;\r\n    if (data.yrMdl && data.yrMdl.includes('/')) score += 2;\r\n    return score;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>{status}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageProcessor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}