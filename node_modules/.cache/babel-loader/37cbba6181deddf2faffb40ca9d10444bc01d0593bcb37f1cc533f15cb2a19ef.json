{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shoai\\\\Desktop\\\\AI Scanner\\\\ai-scanner\\\\src\\\\components\\\\ImageProcessor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageProcessor({\n  file,\n  onDataExtracted\n}) {\n  _s();\n  const [status, setStatus] = useState('');\n  useEffect(() => {\n    const processImage = async () => {\n      try {\n        setStatus('Processing image...');\n        const result = await Tesseract.recognize(file, 'eng', {\n          logger: m => console.log(m)\n        });\n        const text = result.data.text;\n        console.log('Extracted text:', text);\n        const cleanedText = preprocessText(text);\n        console.log('Cleaned text:', cleanedText);\n        const extractedData = extractInformation(cleanedText);\n        console.log('Extracted data:', extractedData);\n        if (extractedData.vin || extractedData.desc || extractedData.yrMdl) {\n          onDataExtracted(extractedData);\n          setStatus('Processing complete');\n        } else {\n          setStatus('Failed to extract information. Please try a different image.');\n        }\n      } catch (error) {\n        console.error('Error processing image:', error);\n        setStatus('Error processing image. Please try again.');\n      }\n    };\n    if (file) {\n      processImage();\n    }\n  }, [file, onDataExtracted]);\n  const preprocessText = text => {\n    return text.replace(/\\s+/g, ' ').trim().toUpperCase();\n  };\n  const extractInformation = text => {\n    const extractedData = {\n      vin: extractVIN(text),\n      desc: extractDESC(text),\n      yrMdl: extractYRMDL(text)\n    };\n\n    // If primary extraction fails, try alternative patterns\n    if (!extractedData.vin) extractedData.vin = extractVINAlternative(text);\n    if (!extractedData.desc) extractedData.desc = extractDESCAlternative(text);\n    if (!extractedData.yrMdl) extractedData.yrMdl = extractYRMDLAlternative(text);\n    return extractedData;\n  };\n  const extractVIN = text => {\n    const vinRegex = /VIN:?\\s*([A-HJ-NPR-Z0-9]{17})/i;\n    const match = text.match(vinRegex);\n    return match ? match[1] : '';\n  };\n  const extractVINAlternative = text => {\n    const vinRegex = /([A-HJ-NPR-Z0-9]{17})/;\n    const match = text.match(vinRegex);\n    return match ? match[1] : '';\n  };\n  const extractDESC = text => {\n    const descRegex = /DESC\\.?:?\\s*(\\S+(?:\\s+\\S+){0,3})/i;\n    const match = text.match(descRegex);\n    return match ? match[1] : '';\n  };\n  const extractDESCAlternative = text => {\n    const carModels = ['COROLLA', 'CAMRY', 'RAV4', 'HIGHLANDER', 'TACOMA', 'TUNDRA'];\n    for (const model of carModels) {\n      if (text.includes(model)) return model;\n    }\n    return '';\n  };\n  const extractYRMDL = text => {\n    const yrMdlRegex = /YR\\/MDL:?\\s*(\\d{4}\\/\\S+)/i;\n    const match = text.match(yrMdlRegex);\n    return match ? match[1] : '';\n  };\n  const extractYRMDLAlternative = text => {\n    const yearRegex = /\\b(20\\d{2})\\b/;\n    const yearMatch = text.match(yearRegex);\n    if (yearMatch) {\n      const year = yearMatch[1];\n      const modelRegex = new RegExp(`${year}\\\\s*(\\\\S+)`, 'i');\n      const modelMatch = text.match(modelRegex);\n      if (modelMatch) {\n        return `${year}/${modelMatch[1]}`;\n      }\n    }\n    return '';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageProcessor, \"n83CR3Lja6Jhpo68KQMsYUAIUVk=\");\n_c = ImageProcessor;\nexport default ImageProcessor;\nvar _c;\n$RefreshReg$(_c, \"ImageProcessor\");","map":{"version":3,"names":["React","useEffect","useState","Tesseract","jsxDEV","_jsxDEV","ImageProcessor","file","onDataExtracted","_s","status","setStatus","processImage","result","recognize","logger","m","console","log","text","data","cleanedText","preprocessText","extractedData","extractInformation","vin","desc","yrMdl","error","replace","trim","toUpperCase","extractVIN","extractDESC","extractYRMDL","extractVINAlternative","extractDESCAlternative","extractYRMDLAlternative","vinRegex","match","descRegex","carModels","model","includes","yrMdlRegex","yearRegex","yearMatch","year","modelRegex","RegExp","modelMatch","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shoai/Desktop/AI Scanner/ai-scanner/src/components/ImageProcessor.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Tesseract from 'tesseract.js';\r\n\r\nfunction ImageProcessor({ file, onDataExtracted }) {\r\n  const [status, setStatus] = useState('');\r\n\r\n  useEffect(() => {\r\n    const processImage = async () => {\r\n      try {\r\n        setStatus('Processing image...');\r\n        const result = await Tesseract.recognize(file, 'eng', {\r\n          logger: m => console.log(m)\r\n        });\r\n        const text = result.data.text;\r\n        console.log('Extracted text:', text);\r\n\r\n        const cleanedText = preprocessText(text);\r\n        console.log('Cleaned text:', cleanedText);\r\n\r\n        const extractedData = extractInformation(cleanedText);\r\n        console.log('Extracted data:', extractedData);\r\n\r\n        if (extractedData.vin || extractedData.desc || extractedData.yrMdl) {\r\n          onDataExtracted(extractedData);\r\n          setStatus('Processing complete');\r\n        } else {\r\n          setStatus('Failed to extract information. Please try a different image.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error processing image:', error);\r\n        setStatus('Error processing image. Please try again.');\r\n      }\r\n    };\r\n\r\n    if (file) {\r\n      processImage();\r\n    }\r\n  }, [file, onDataExtracted]);\r\n\r\n  const preprocessText = (text) => {\r\n    return text.replace(/\\s+/g, ' ').trim().toUpperCase();\r\n  };\r\n\r\n  const extractInformation = (text) => {\r\n    const extractedData = {\r\n      vin: extractVIN(text),\r\n      desc: extractDESC(text),\r\n      yrMdl: extractYRMDL(text)\r\n    };\r\n\r\n    // If primary extraction fails, try alternative patterns\r\n    if (!extractedData.vin) extractedData.vin = extractVINAlternative(text);\r\n    if (!extractedData.desc) extractedData.desc = extractDESCAlternative(text);\r\n    if (!extractedData.yrMdl) extractedData.yrMdl = extractYRMDLAlternative(text);\r\n\r\n    return extractedData;\r\n  };\r\n\r\n  const extractVIN = (text) => {\r\n    const vinRegex = /VIN:?\\s*([A-HJ-NPR-Z0-9]{17})/i;\r\n    const match = text.match(vinRegex);\r\n    return match ? match[1] : '';\r\n  };\r\n\r\n  const extractVINAlternative = (text) => {\r\n    const vinRegex = /([A-HJ-NPR-Z0-9]{17})/;\r\n    const match = text.match(vinRegex);\r\n    return match ? match[1] : '';\r\n  };\r\n\r\n  const extractDESC = (text) => {\r\n    const descRegex = /DESC\\.?:?\\s*(\\S+(?:\\s+\\S+){0,3})/i;\r\n    const match = text.match(descRegex);\r\n    return match ? match[1] : '';\r\n  };\r\n\r\n  const extractDESCAlternative = (text) => {\r\n    const carModels = ['COROLLA', 'CAMRY', 'RAV4', 'HIGHLANDER', 'TACOMA', 'TUNDRA'];\r\n    for (const model of carModels) {\r\n      if (text.includes(model)) return model;\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const extractYRMDL = (text) => {\r\n    const yrMdlRegex = /YR\\/MDL:?\\s*(\\d{4}\\/\\S+)/i;\r\n    const match = text.match(yrMdlRegex);\r\n    return match ? match[1] : '';\r\n  };\r\n\r\n  const extractYRMDLAlternative = (text) => {\r\n    const yearRegex = /\\b(20\\d{2})\\b/;\r\n    const yearMatch = text.match(yearRegex);\r\n    if (yearMatch) {\r\n      const year = yearMatch[1];\r\n      const modelRegex = new RegExp(`${year}\\\\s*(\\\\S+)`, 'i');\r\n      const modelMatch = text.match(modelRegex);\r\n      if (modelMatch) {\r\n        return `${year}/${modelMatch[1]}`;\r\n      }\r\n    }\r\n    return '';\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>{status}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageProcessor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}