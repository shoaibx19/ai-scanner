{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shoai\\\\Desktop\\\\AI Scanner\\\\ai-scanner\\\\src\\\\components\\\\ImageProcessor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageProcessor({\n  file,\n  onDataExtracted\n}) {\n  _s();\n  useEffect(() => {\n    const processImage = async () => {\n      try {\n        const result = await Tesseract.recognize(file);\n        const text = result.data.text;\n\n        // Extract VIN, DESC, and YR/MDL from the OCR result\n        const vin = extractVIN(text);\n        const desc = extractDESC(text);\n        const yrMdl = extractYRMDL(text);\n        onDataExtracted({\n          vin,\n          desc,\n          yrMdl\n        });\n      } catch (error) {\n        console.error('Error processing image:', error);\n      }\n    };\n    if (file) {\n      processImage();\n    }\n  }, [file, onDataExtracted]);\n  const extractVIN = text => {\n    const vinRegex = /VIN:\\s*(\\S+)/i;\n    const match = text.match(vinRegex);\n    return match ? match[1] : '';\n  };\n  const extractDESC = text => {\n    const descRegex = /DESC\\.?:\\s*(\\S+)/i;\n    const match = text.match(descRegex);\n    return match ? match[1] : '';\n  };\n  const extractYRMDL = text => {\n    const yrMdlRegex = /YR\\/MDL:\\s*(\\S+)/i;\n    const match = text.match(yrMdlRegex);\n    return match ? match[1] : '';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Processing image...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageProcessor, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ImageProcessor;\nexport default ImageProcessor;\nvar _c;\n$RefreshReg$(_c, \"ImageProcessor\");","map":{"version":3,"names":["React","useEffect","Tesseract","jsxDEV","_jsxDEV","ImageProcessor","file","onDataExtracted","_s","processImage","result","recognize","text","data","vin","extractVIN","desc","extractDESC","yrMdl","extractYRMDL","error","console","vinRegex","match","descRegex","yrMdlRegex","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shoai/Desktop/AI Scanner/ai-scanner/src/components/ImageProcessor.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport Tesseract from 'tesseract.js';\r\n\r\nfunction ImageProcessor({ file, onDataExtracted }) {\r\n  useEffect(() => {\r\n    const processImage = async () => {\r\n      try {\r\n        const result = await Tesseract.recognize(file);\r\n        const text = result.data.text;\r\n\r\n        // Extract VIN, DESC, and YR/MDL from the OCR result\r\n        const vin = extractVIN(text);\r\n        const desc = extractDESC(text);\r\n        const yrMdl = extractYRMDL(text);\r\n\r\n        onDataExtracted({ vin, desc, yrMdl });\r\n      } catch (error) {\r\n        console.error('Error processing image:', error);\r\n      }\r\n    };\r\n\r\n    if (file) {\r\n      processImage();\r\n    }\r\n  }, [file, onDataExtracted]);\r\n\r\n  const extractVIN = (text) => {\r\n    const vinRegex = /VIN:\\s*(\\S+)/i;\r\n    const match = text.match(vinRegex);\r\n    return match ? match[1] : '';\r\n  };\r\n\r\n  const extractDESC = (text) => {\r\n    const descRegex = /DESC\\.?:\\s*(\\S+)/i;\r\n    const match = text.match(descRegex);\r\n    return match ? match[1] : '';\r\n  };\r\n\r\n  const extractYRMDL = (text) => {\r\n    const yrMdlRegex = /YR\\/MDL:\\s*(\\S+)/i;\r\n    const match = text.match(yrMdlRegex);\r\n    return match ? match[1] : '';\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>Processing image...</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageProcessor;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,cAAcA,CAAC;EAAEC,IAAI;EAAEC;AAAgB,CAAC,EAAE;EAAAC,EAAA;EACjDP,SAAS,CAAC,MAAM;IACd,MAAMQ,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,MAAM,GAAG,MAAMR,SAAS,CAACS,SAAS,CAACL,IAAI,CAAC;QAC9C,MAAMM,IAAI,GAAGF,MAAM,CAACG,IAAI,CAACD,IAAI;;QAE7B;QACA,MAAME,GAAG,GAAGC,UAAU,CAACH,IAAI,CAAC;QAC5B,MAAMI,IAAI,GAAGC,WAAW,CAACL,IAAI,CAAC;QAC9B,MAAMM,KAAK,GAAGC,YAAY,CAACP,IAAI,CAAC;QAEhCL,eAAe,CAAC;UAAEO,GAAG;UAAEE,IAAI;UAAEE;QAAM,CAAC,CAAC;MACvC,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAED,IAAId,IAAI,EAAE;MACRG,YAAY,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,CAACH,IAAI,EAAEC,eAAe,CAAC,CAAC;EAE3B,MAAMQ,UAAU,GAAIH,IAAI,IAAK;IAC3B,MAAMU,QAAQ,GAAG,eAAe;IAChC,MAAMC,KAAK,GAAGX,IAAI,CAACW,KAAK,CAACD,QAAQ,CAAC;IAClC,OAAOC,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;EAC9B,CAAC;EAED,MAAMN,WAAW,GAAIL,IAAI,IAAK;IAC5B,MAAMY,SAAS,GAAG,mBAAmB;IACrC,MAAMD,KAAK,GAAGX,IAAI,CAACW,KAAK,CAACC,SAAS,CAAC;IACnC,OAAOD,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;EAC9B,CAAC;EAED,MAAMJ,YAAY,GAAIP,IAAI,IAAK;IAC7B,MAAMa,UAAU,GAAG,mBAAmB;IACtC,MAAMF,KAAK,GAAGX,IAAI,CAACW,KAAK,CAACE,UAAU,CAAC;IACpC,OAAOF,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;EAC9B,CAAC;EAED,oBACEnB,OAAA;IAAAsB,QAAA,eACEtB,OAAA;MAAAsB,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvB,CAAC;AAEV;AAACtB,EAAA,CA9CQH,cAAc;AAAA0B,EAAA,GAAd1B,cAAc;AAgDvB,eAAeA,cAAc;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}