{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shoai\\\\Desktop\\\\AI Scanner\\\\ai-scanner\\\\src\\\\components\\\\ImageProcessor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageProcessor({\n  file,\n  onDataExtracted\n}) {\n  _s();\n  const [status, setStatus] = useState('');\n  useEffect(() => {\n    const processImage = async () => {\n      try {\n        setStatus('Processing image...');\n        const preprocessingMethods = [{\n          name: 'original',\n          process: img => img\n        }, {\n          name: 'grayscale',\n          process: applyGrayscale\n        }, {\n          name: 'threshold',\n          process: applyThreshold\n        }];\n        let bestResult = null;\n        let highestScore = -1;\n        for (const method of preprocessingMethods) {\n          const processedImage = await method.process(file);\n          const result = await Tesseract.recognize(processedImage, 'eng', {\n            logger: m => console.log(`${method.name}:`, m)\n          });\n          const extractedData = extractInformation(result.data.text);\n          const score = calculateExtractionScore(extractedData);\n          console.log(`${method.name} extracted:`, extractedData, 'score:', score);\n          if (score > highestScore) {\n            bestResult = extractedData;\n            highestScore = score;\n          }\n        }\n        if (bestResult && (bestResult.vin || bestResult.desc || bestResult.yrMdl)) {\n          onDataExtracted(bestResult);\n          setStatus('Processing complete');\n        } else {\n          setStatus('Failed to extract information. Please try a different image.');\n        }\n      } catch (error) {\n        console.error('Error processing image:', error);\n        setStatus('Error processing image. Please try again.');\n      }\n    };\n    if (file) {\n      processImage();\n    }\n  }, [file, onDataExtracted]);\n  const applyGrayscale = file => {\n    return new Promise(resolve => {\n      const img = new Image();\n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        canvas.width = img.width;\n        canvas.height = img.height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        const data = imageData.data;\n        for (let i = 0; i < data.length; i += 4) {\n          const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n          data[i] = data[i + 1] = data[i + 2] = avg;\n        }\n        ctx.putImageData(imageData, 0, 0);\n        canvas.toBlob(resolve);\n      };\n      img.src = URL.createObjectURL(file);\n    });\n  };\n  const applyThreshold = file => {\n    return new Promise(resolve => {\n      const img = new Image();\n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        canvas.width = img.width;\n        canvas.height = img.height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        const data = imageData.data;\n        for (let i = 0; i < data.length; i += 4) {\n          const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n          const v = avg > 128 ? 255 : 0;\n          data[i] = data[i + 1] = data[i + 2] = v;\n        }\n        ctx.putImageData(imageData, 0, 0);\n        canvas.toBlob(resolve);\n      };\n      img.src = URL.createObjectURL(file);\n    });\n  };\n  const extractInformation = text => {\n    const cleanedText = text.replace(/\\s+/g, ' ').trim();\n    return {\n      vin: extractVIN(cleanedText),\n      desc: extractDESC(cleanedText),\n      yrMdl: extractYRMDL(cleanedText)\n    };\n  };\n  const extractVIN = text => {\n    const vinPatterns = [/VIN:?\\s*([A-HJ-NPR-Z0-9]{17})/i, /\\b([A-HJ-NPR-Z0-9]{17})\\b/, /VEHICLE\\s+ID\\s+NUMBER:?\\s*([A-HJ-NPR-Z0-9]{17})/i];\n    for (const pattern of vinPatterns) {\n      const match = text.match(pattern);\n      if (match) return match[1];\n    }\n    return '';\n  };\n  const extractDESC = text => {\n    const descPatterns = [/MAKE\\/MODEL:?\\s*(\\w+(?:\\s+\\w+)?)/i, /MODEL:?\\s*(\\w+(?:\\s+\\w+)?)/i, /VEHICLE:?\\s*(\\w+(?:\\s+\\w+)?)/i, /CAR:?\\s*(\\w+(?:\\s+\\w+)?)/i];\n    for (const pattern of descPatterns) {\n      const match = text.match(pattern);\n      if (match) {\n        const desc = match[1].replace(/[^\\w\\s]/g, '').trim().toUpperCase();\n        const words = desc.split(/\\s+/);\n        return words.slice(0, 2).join(' ');\n      }\n    }\n\n    // Fallback: look for known car brands\n    const carBrands = ['TOYOTA', 'HONDA', 'FORD', 'CHEVROLET', 'NISSAN', 'HYUNDAI', 'KIA', 'SUBARU', 'MAZDA', 'VOLKSWAGEN'];\n    for (const brand of carBrands) {\n      if (text.includes(brand)) {\n        const brandIndex = text.indexOf(brand);\n        const afterBrand = text.slice(brandIndex + brand.length);\n        const words = afterBrand.split(/\\s+/);\n        return `${brand} ${words[0] || ''}`.trim().toUpperCase();\n      }\n    }\n    return '';\n  };\n  const extractYRMDL = text => {\n    const yrMdlPatterns = [/YR\\/MDL:?\\s*(\\d{4}\\/\\d+[A-Z]?)/i, /YEAR\\/MODEL:?\\s*(\\d{4}\\/\\d+[A-Z]?)/i, /(\\d{4})\\s*(\\w+)/];\n    for (const pattern of yrMdlPatterns) {\n      const match = text.match(pattern);\n      if (match) {\n        if (match[2]) {\n          return `${match[1]}/${match[2]}`;\n        }\n        return match[1];\n      }\n    }\n\n    // Fallback: look for a 4-digit year\n    const yearMatch = text.match(/\\b(19|20)\\d{2}\\b/);\n    if (yearMatch) {\n      const year = yearMatch[1];\n      const afterYear = text.slice(text.indexOf(year) + 4);\n      const modelMatch = afterYear.match(/\\b[A-Z0-9]+\\b/);\n      if (modelMatch) {\n        return `${year}/${modelMatch[0]}`;\n      }\n      return year;\n    }\n    return '';\n  };\n  const calculateExtractionScore = data => {\n    let score = 0;\n    if (data.vin && data.vin.length === 17) score += 3;\n    if (data.desc && data.desc.split(' ').length === 2) score += 2;\n    if (data.yrMdl && data.yrMdl.includes('/')) score += 2;\n    return score;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageProcessor, \"n83CR3Lja6Jhpo68KQMsYUAIUVk=\");\n_c = ImageProcessor;\nexport default ImageProcessor;\nvar _c;\n$RefreshReg$(_c, \"ImageProcessor\");","map":{"version":3,"names":["React","useEffect","useState","Tesseract","jsxDEV","_jsxDEV","ImageProcessor","file","onDataExtracted","_s","status","setStatus","processImage","preprocessingMethods","name","process","img","applyGrayscale","applyThreshold","bestResult","highestScore","method","processedImage","result","recognize","logger","m","console","log","extractedData","extractInformation","data","text","score","calculateExtractionScore","vin","desc","yrMdl","error","Promise","resolve","Image","onload","canvas","document","createElement","width","height","ctx","getContext","drawImage","imageData","getImageData","i","length","avg","putImageData","toBlob","src","URL","createObjectURL","v","cleanedText","replace","trim","extractVIN","extractDESC","extractYRMDL","vinPatterns","pattern","match","descPatterns","toUpperCase","words","split","slice","join","carBrands","brand","includes","brandIndex","indexOf","afterBrand","yrMdlPatterns","yearMatch","year","afterYear","modelMatch","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shoai/Desktop/AI Scanner/ai-scanner/src/components/ImageProcessor.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Tesseract from 'tesseract.js';\r\n\r\nfunction ImageProcessor({ file, onDataExtracted }) {\r\n  const [status, setStatus] = useState('');\r\n\r\n  useEffect(() => {\r\n    const processImage = async () => {\r\n      try {\r\n        setStatus('Processing image...');\r\n        const preprocessingMethods = [\r\n          { name: 'original', process: img => img },\r\n          { name: 'grayscale', process: applyGrayscale },\r\n          { name: 'threshold', process: applyThreshold },\r\n        ];\r\n\r\n        let bestResult = null;\r\n        let highestScore = -1;\r\n\r\n        for (const method of preprocessingMethods) {\r\n          const processedImage = await method.process(file);\r\n          const result = await Tesseract.recognize(processedImage, 'eng', {\r\n            logger: m => console.log(`${method.name}:`, m)\r\n          });\r\n\r\n          const extractedData = extractInformation(result.data.text);\r\n          const score = calculateExtractionScore(extractedData);\r\n\r\n          console.log(`${method.name} extracted:`, extractedData, 'score:', score);\r\n\r\n          if (score > highestScore) {\r\n            bestResult = extractedData;\r\n            highestScore = score;\r\n          }\r\n        }\r\n\r\n        if (bestResult && (bestResult.vin || bestResult.desc || bestResult.yrMdl)) {\r\n          onDataExtracted(bestResult);\r\n          setStatus('Processing complete');\r\n        } else {\r\n          setStatus('Failed to extract information. Please try a different image.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error processing image:', error);\r\n        setStatus('Error processing image. Please try again.');\r\n      }\r\n    };\r\n\r\n    if (file) {\r\n      processImage();\r\n    }\r\n  }, [file, onDataExtracted]);\r\n\r\n  const applyGrayscale = (file) => {\r\n    return new Promise((resolve) => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.drawImage(img, 0, 0);\r\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        const data = imageData.data;\r\n        for (let i = 0; i < data.length; i += 4) {\r\n          const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\r\n          data[i] = data[i + 1] = data[i + 2] = avg;\r\n        }\r\n        ctx.putImageData(imageData, 0, 0);\r\n        canvas.toBlob(resolve);\r\n      };\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  };\r\n\r\n  const applyThreshold = (file) => {\r\n    return new Promise((resolve) => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.drawImage(img, 0, 0);\r\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        const data = imageData.data;\r\n        for (let i = 0; i < data.length; i += 4) {\r\n          const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\r\n          const v = avg > 128 ? 255 : 0;\r\n          data[i] = data[i + 1] = data[i + 2] = v;\r\n        }\r\n        ctx.putImageData(imageData, 0, 0);\r\n        canvas.toBlob(resolve);\r\n      };\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  };\r\n\r\n  const extractInformation = (text) => {\r\n    const cleanedText = text.replace(/\\s+/g, ' ').trim();\r\n    return {\r\n      vin: extractVIN(cleanedText),\r\n      desc: extractDESC(cleanedText),\r\n      yrMdl: extractYRMDL(cleanedText)\r\n    };\r\n  };\r\n\r\n  const extractVIN = (text) => {\r\n    const vinPatterns = [\r\n      /VIN:?\\s*([A-HJ-NPR-Z0-9]{17})/i,\r\n      /\\b([A-HJ-NPR-Z0-9]{17})\\b/,\r\n      /VEHICLE\\s+ID\\s+NUMBER:?\\s*([A-HJ-NPR-Z0-9]{17})/i\r\n    ];\r\n\r\n    for (const pattern of vinPatterns) {\r\n      const match = text.match(pattern);\r\n      if (match) return match[1];\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const extractDESC = (text) => {\r\n    const descPatterns = [\r\n      /MAKE\\/MODEL:?\\s*(\\w+(?:\\s+\\w+)?)/i,\r\n      /MODEL:?\\s*(\\w+(?:\\s+\\w+)?)/i,\r\n      /VEHICLE:?\\s*(\\w+(?:\\s+\\w+)?)/i,\r\n      /CAR:?\\s*(\\w+(?:\\s+\\w+)?)/i\r\n    ];\r\n\r\n    for (const pattern of descPatterns) {\r\n      const match = text.match(pattern);\r\n      if (match) {\r\n        const desc = match[1].replace(/[^\\w\\s]/g, '').trim().toUpperCase();\r\n        const words = desc.split(/\\s+/);\r\n        return words.slice(0, 2).join(' ');\r\n      }\r\n    }\r\n\r\n    // Fallback: look for known car brands\r\n    const carBrands = ['TOYOTA', 'HONDA', 'FORD', 'CHEVROLET', 'NISSAN', 'HYUNDAI', 'KIA', 'SUBARU', 'MAZDA', 'VOLKSWAGEN'];\r\n    for (const brand of carBrands) {\r\n      if (text.includes(brand)) {\r\n        const brandIndex = text.indexOf(brand);\r\n        const afterBrand = text.slice(brandIndex + brand.length);\r\n        const words = afterBrand.split(/\\s+/);\r\n        return `${brand} ${words[0] || ''}`.trim().toUpperCase();\r\n      }\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const extractYRMDL = (text) => {\r\n    const yrMdlPatterns = [\r\n      /YR\\/MDL:?\\s*(\\d{4}\\/\\d+[A-Z]?)/i,\r\n      /YEAR\\/MODEL:?\\s*(\\d{4}\\/\\d+[A-Z]?)/i,\r\n      /(\\d{4})\\s*(\\w+)/\r\n    ];\r\n\r\n    for (const pattern of yrMdlPatterns) {\r\n      const match = text.match(pattern);\r\n      if (match) {\r\n        if (match[2]) {\r\n          return `${match[1]}/${match[2]}`;\r\n        }\r\n        return match[1];\r\n      }\r\n    }\r\n\r\n    // Fallback: look for a 4-digit year\r\n    const yearMatch = text.match(/\\b(19|20)\\d{2}\\b/);\r\n    if (yearMatch) {\r\n      const year = yearMatch[1];\r\n      const afterYear = text.slice(text.indexOf(year) + 4);\r\n      const modelMatch = afterYear.match(/\\b[A-Z0-9]+\\b/);\r\n      if (modelMatch) {\r\n        return `${year}/${modelMatch[0]}`;\r\n      }\r\n      return year;\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const calculateExtractionScore = (data) => {\r\n    let score = 0;\r\n    if (data.vin && data.vin.length === 17) score += 3;\r\n    if (data.desc && data.desc.split(' ').length === 2) score += 2;\r\n    if (data.yrMdl && data.yrMdl.includes('/')) score += 2;\r\n    return score;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>{status}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageProcessor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}