{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shoai\\\\Desktop\\\\AI Scanner\\\\ai-scanner\\\\src\\\\components\\\\ImageProcessor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageProcessor({\n  file,\n  onDataExtracted\n}) {\n  _s();\n  const [status, setStatus] = useState('');\n  useEffect(() => {\n    const processImage = async () => {\n      try {\n        setStatus('Processing image...');\n        const extractionMethods = [{\n          name: 'Default',\n          process: img => Tesseract.recognize(img, 'eng')\n        }, {\n          name: 'Inverted',\n          process: img => invertImage(img).then(inverted => Tesseract.recognize(inverted, 'eng'))\n        }, {\n          name: 'Sharpened',\n          process: img => sharpenImage(img).then(sharpened => Tesseract.recognize(sharpened, 'eng'))\n        }];\n        let bestResult = null;\n        let highestConfidence = -1;\n        for (const method of extractionMethods) {\n          console.log(`Trying extraction method: ${method.name}`);\n          const result = await method.process(file);\n          console.log(`${method.name} extracted text:`, result.data.text);\n          if (result.data.confidence > highestConfidence) {\n            bestResult = result;\n            highestConfidence = result.data.confidence;\n          }\n        }\n        if (bestResult) {\n          const cleanedText = preprocessText(bestResult.data.text);\n          console.log('Cleaned text:', cleanedText);\n          const extractedData = extractInformation(cleanedText);\n          console.log('Extracted data:', extractedData);\n          if (extractedData.vin || extractedData.desc || extractedData.yrMdl) {\n            onDataExtracted(extractedData);\n            setStatus('Processing complete');\n          } else {\n            setStatus('Failed to extract information. Please try a different image.');\n          }\n        } else {\n          setStatus('Failed to process image. Please try a clearer image.');\n        }\n      } catch (error) {\n        console.error('Error processing image:', error);\n        setStatus('Error processing image. Please try again.');\n      }\n    };\n    if (file) {\n      processImage();\n    }\n  }, [file, onDataExtracted]);\n  const invertImage = async file => {\n    return new Promise(resolve => {\n      const img = new Image();\n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        canvas.width = img.width;\n        canvas.height = img.height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        const data = imageData.data;\n        for (let i = 0; i < data.length; i += 4) {\n          data[i] = 255 - data[i];\n          data[i + 1] = 255 - data[i + 1];\n          data[i + 2] = 255 - data[i + 2];\n        }\n        ctx.putImageData(imageData, 0, 0);\n        canvas.toBlob(resolve);\n      };\n      img.src = URL.createObjectURL(file);\n    });\n  };\n  const sharpenImage = async file => {\n    return new Promise(resolve => {\n      const img = new Image();\n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        canvas.width = img.width;\n        canvas.height = img.height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        const sharpenedData = sharpen(imageData);\n        ctx.putImageData(sharpenedData, 0, 0);\n        canvas.toBlob(resolve);\n      };\n      img.src = URL.createObjectURL(file);\n    });\n  };\n  const sharpen = imgData => {\n    const w = imgData.width;\n    const h = imgData.height;\n    const kernel = [-1, -1, -1, -1, 9, -1, -1, -1, -1];\n    const src = imgData.data;\n    const dst = new Uint8ClampedArray(src.length);\n    for (let y = 1; y < h - 1; y++) {\n      for (let x = 1; x < w - 1; x++) {\n        const i = (y * w + x) * 4;\n        for (let c = 0; c < 3; c++) {\n          let val = kernel[0] * src[i - w * 4 - 4 + c] + kernel[1] * src[i - w * 4 + c] + kernel[2] * src[i - w * 4 + 4 + c] + kernel[3] * src[i - 4 + c] + kernel[4] * src[i + c] + kernel[5] * src[i + 4 + c] + kernel[6] * src[i + w * 4 - 4 + c] + kernel[7] * src[i + w * 4 + c] + kernel[8] * src[i + w * 4 + 4 + c];\n          dst[i + c] = val;\n        }\n        dst[i + 3] = src[i + 3];\n      }\n    }\n    return new ImageData(dst, w, h);\n  };\n  const preprocessText = text => {\n    return text.replace(/\\s+/g, ' ').trim();\n  };\n  const extractInformation = text => {\n    const extractedData = {\n      vin: extractVIN(text),\n      desc: extractDESC(text),\n      yrMdl: extractYRMDL(text)\n    };\n\n    // Fallback extraction for missing data\n    if (!extractedData.vin) extractedData.vin = fallbackExtractVIN(text);\n    if (!extractedData.desc) extractedData.desc = fallbackExtractDESC(text);\n    if (!extractedData.yrMdl) extractedData.yrMdl = fallbackExtractYRMDL(text);\n    return extractedData;\n  };\n  const extractVIN = text => {\n    const vinRegex = /VIN:?\\s*([A-HJ-NPR-Z0-9]{17})/i;\n    const match = text.match(vinRegex);\n    return match ? match[1] : '';\n  };\n  const extractDESC = text => {\n    const descRegex = /DESC\\.?:?\\s*(\\w+(?:\\s+\\w+)?)/i;\n    const match = text.match(descRegex);\n    if (match) {\n      const cleanDesc = match[1].replace(/[^\\w\\s]/g, '').trim().toUpperCase();\n      const words = cleanDesc.split(/\\s+/);\n      return words.slice(0, 2).join(' ');\n    }\n    return '';\n  };\n  const extractYRMDL = text => {\n    const yrMdlRegex = /YR\\/MDL:?\\s*(\\d{4}\\/\\d+[A-Z]?)/i;\n    const match = text.match(yrMdlRegex);\n    return match ? match[1] : '';\n  };\n  const fallbackExtractVIN = text => {\n    const vinRegex = /\\b([A-HJ-NPR-Z0-9]{17})\\b/;\n    const match = text.match(vinRegex);\n    return match ? match[1] : '';\n  };\n  const fallbackExtractDESC = text => {\n    const carBrands = ['TOYOTA', 'HONDA', 'FORD', 'CHEVROLET', 'NISSAN', 'HYUNDAI', 'KIA', 'SUBARU', 'MAZDA', 'VOLKSWAGEN'];\n    for (const brand of carBrands) {\n      if (text.includes(brand)) {\n        const brandIndex = text.indexOf(brand);\n        const afterBrand = text.slice(brandIndex + brand.length);\n        const words = afterBrand.split(/\\s+/);\n        return `${brand} ${words[0] || ''}`.trim().toUpperCase();\n      }\n    }\n    return '';\n  };\n  const fallbackExtractYRMDL = text => {\n    const yearRegex = /\\b(19|20)\\d{2}\\b/;\n    const match = text.match(yearRegex);\n    if (match) {\n      const year = match[1];\n      const afterYear = text.slice(text.indexOf(year) + 4);\n      const modelRegex = /\\b[A-Z0-9]+\\b/;\n      const modelMatch = afterYear.match(modelRegex);\n      if (modelMatch) {\n        return `${year}/${modelMatch[0]}`;\n      }\n      return year;\n    }\n    return '';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageProcessor, \"n83CR3Lja6Jhpo68KQMsYUAIUVk=\");\n_c = ImageProcessor;\nexport default ImageProcessor;\nvar _c;\n$RefreshReg$(_c, \"ImageProcessor\");","map":{"version":3,"names":["React","useEffect","useState","Tesseract","jsxDEV","_jsxDEV","ImageProcessor","file","onDataExtracted","_s","status","setStatus","processImage","extractionMethods","name","process","img","recognize","invertImage","then","inverted","sharpenImage","sharpened","bestResult","highestConfidence","method","console","log","result","data","text","confidence","cleanedText","preprocessText","extractedData","extractInformation","vin","desc","yrMdl","error","Promise","resolve","Image","onload","canvas","document","createElement","width","height","ctx","getContext","drawImage","imageData","getImageData","i","length","putImageData","toBlob","src","URL","createObjectURL","sharpenedData","sharpen","imgData","w","h","kernel","dst","Uint8ClampedArray","y","x","c","val","ImageData","replace","trim","extractVIN","extractDESC","extractYRMDL","fallbackExtractVIN","fallbackExtractDESC","fallbackExtractYRMDL","vinRegex","match","descRegex","cleanDesc","toUpperCase","words","split","slice","join","yrMdlRegex","carBrands","brand","includes","brandIndex","indexOf","afterBrand","yearRegex","year","afterYear","modelRegex","modelMatch","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shoai/Desktop/AI Scanner/ai-scanner/src/components/ImageProcessor.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Tesseract from 'tesseract.js';\r\n\r\nfunction ImageProcessor({ file, onDataExtracted }) {\r\n  const [status, setStatus] = useState('');\r\n\r\n  useEffect(() => {\r\n    const processImage = async () => {\r\n      try {\r\n        setStatus('Processing image...');\r\n        const extractionMethods = [\r\n          { name: 'Default', process: (img) => Tesseract.recognize(img, 'eng') },\r\n          { name: 'Inverted', process: (img) => invertImage(img).then(inverted => Tesseract.recognize(inverted, 'eng')) },\r\n          { name: 'Sharpened', process: (img) => sharpenImage(img).then(sharpened => Tesseract.recognize(sharpened, 'eng')) },\r\n        ];\r\n\r\n        let bestResult = null;\r\n        let highestConfidence = -1;\r\n\r\n        for (const method of extractionMethods) {\r\n          console.log(`Trying extraction method: ${method.name}`);\r\n          const result = await method.process(file);\r\n          console.log(`${method.name} extracted text:`, result.data.text);\r\n\r\n          if (result.data.confidence > highestConfidence) {\r\n            bestResult = result;\r\n            highestConfidence = result.data.confidence;\r\n          }\r\n        }\r\n\r\n        if (bestResult) {\r\n          const cleanedText = preprocessText(bestResult.data.text);\r\n          console.log('Cleaned text:', cleanedText);\r\n\r\n          const extractedData = extractInformation(cleanedText);\r\n          console.log('Extracted data:', extractedData);\r\n\r\n          if (extractedData.vin || extractedData.desc || extractedData.yrMdl) {\r\n            onDataExtracted(extractedData);\r\n            setStatus('Processing complete');\r\n          } else {\r\n            setStatus('Failed to extract information. Please try a different image.');\r\n          }\r\n        } else {\r\n          setStatus('Failed to process image. Please try a clearer image.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error processing image:', error);\r\n        setStatus('Error processing image. Please try again.');\r\n      }\r\n    };\r\n\r\n    if (file) {\r\n      processImage();\r\n    }\r\n  }, [file, onDataExtracted]);\r\n\r\n  const invertImage = async (file) => {\r\n    return new Promise((resolve) => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.drawImage(img, 0, 0);\r\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        const data = imageData.data;\r\n        for (let i = 0; i < data.length; i += 4) {\r\n          data[i] = 255 - data[i];\r\n          data[i + 1] = 255 - data[i + 1];\r\n          data[i + 2] = 255 - data[i + 2];\r\n        }\r\n        ctx.putImageData(imageData, 0, 0);\r\n        canvas.toBlob(resolve);\r\n      };\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  };\r\n\r\n  const sharpenImage = async (file) => {\r\n    return new Promise((resolve) => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.drawImage(img, 0, 0);\r\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        const sharpenedData = sharpen(imageData);\r\n        ctx.putImageData(sharpenedData, 0, 0);\r\n        canvas.toBlob(resolve);\r\n      };\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  };\r\n\r\n  const sharpen = (imgData) => {\r\n    const w = imgData.width;\r\n    const h = imgData.height;\r\n    const kernel = [-1, -1, -1, -1, 9, -1, -1, -1, -1];\r\n    const src = imgData.data;\r\n    const dst = new Uint8ClampedArray(src.length);\r\n    for (let y = 1; y < h - 1; y++) {\r\n      for (let x = 1; x < w - 1; x++) {\r\n        const i = (y * w + x) * 4;\r\n        for (let c = 0; c < 3; c++) {\r\n          let val = kernel[0] * src[i - w * 4 - 4 + c] +\r\n                    kernel[1] * src[i - w * 4 + c] +\r\n                    kernel[2] * src[i - w * 4 + 4 + c] +\r\n                    kernel[3] * src[i - 4 + c] +\r\n                    kernel[4] * src[i + c] +\r\n                    kernel[5] * src[i + 4 + c] +\r\n                    kernel[6] * src[i + w * 4 - 4 + c] +\r\n                    kernel[7] * src[i + w * 4 + c] +\r\n                    kernel[8] * src[i + w * 4 + 4 + c];\r\n          dst[i + c] = val;\r\n        }\r\n        dst[i + 3] = src[i + 3];\r\n      }\r\n    }\r\n    return new ImageData(dst, w, h);\r\n  };\r\n\r\n  const preprocessText = (text) => {\r\n    return text.replace(/\\s+/g, ' ').trim();\r\n  };\r\n\r\n  const extractInformation = (text) => {\r\n    const extractedData = {\r\n      vin: extractVIN(text),\r\n      desc: extractDESC(text),\r\n      yrMdl: extractYRMDL(text)\r\n    };\r\n\r\n    // Fallback extraction for missing data\r\n    if (!extractedData.vin) extractedData.vin = fallbackExtractVIN(text);\r\n    if (!extractedData.desc) extractedData.desc = fallbackExtractDESC(text);\r\n    if (!extractedData.yrMdl) extractedData.yrMdl = fallbackExtractYRMDL(text);\r\n\r\n    return extractedData;\r\n  };\r\n\r\n  const extractVIN = (text) => {\r\n    const vinRegex = /VIN:?\\s*([A-HJ-NPR-Z0-9]{17})/i;\r\n    const match = text.match(vinRegex);\r\n    return match ? match[1] : '';\r\n  };\r\n\r\n  const extractDESC = (text) => {\r\n    const descRegex = /DESC\\.?:?\\s*(\\w+(?:\\s+\\w+)?)/i;\r\n    const match = text.match(descRegex);\r\n    if (match) {\r\n      const cleanDesc = match[1].replace(/[^\\w\\s]/g, '').trim().toUpperCase();\r\n      const words = cleanDesc.split(/\\s+/);\r\n      return words.slice(0, 2).join(' ');\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const extractYRMDL = (text) => {\r\n    const yrMdlRegex = /YR\\/MDL:?\\s*(\\d{4}\\/\\d+[A-Z]?)/i;\r\n    const match = text.match(yrMdlRegex);\r\n    return match ? match[1] : '';\r\n  };\r\n\r\n  const fallbackExtractVIN = (text) => {\r\n    const vinRegex = /\\b([A-HJ-NPR-Z0-9]{17})\\b/;\r\n    const match = text.match(vinRegex);\r\n    return match ? match[1] : '';\r\n  };\r\n\r\n  const fallbackExtractDESC = (text) => {\r\n    const carBrands = ['TOYOTA', 'HONDA', 'FORD', 'CHEVROLET', 'NISSAN', 'HYUNDAI', 'KIA', 'SUBARU', 'MAZDA', 'VOLKSWAGEN'];\r\n    for (const brand of carBrands) {\r\n      if (text.includes(brand)) {\r\n        const brandIndex = text.indexOf(brand);\r\n        const afterBrand = text.slice(brandIndex + brand.length);\r\n        const words = afterBrand.split(/\\s+/);\r\n        return `${brand} ${words[0] || ''}`.trim().toUpperCase();\r\n      }\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const fallbackExtractYRMDL = (text) => {\r\n    const yearRegex = /\\b(19|20)\\d{2}\\b/;\r\n    const match = text.match(yearRegex);\r\n    if (match) {\r\n      const year = match[1];\r\n      const afterYear = text.slice(text.indexOf(year) + 4);\r\n      const modelRegex = /\\b[A-Z0-9]+\\b/;\r\n      const modelMatch = afterYear.match(modelRegex);\r\n      if (modelMatch) {\r\n        return `${year}/${modelMatch[0]}`;\r\n      }\r\n      return year;\r\n    }\r\n    return '';\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>{status}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageProcessor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}